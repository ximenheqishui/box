#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');




var debug = require('debug')('node-server:server');
var http = require('http');
let opn = require('opn')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


if (app.get('env') === 'development') {
  /**
   *  开发环境下页面热更新  css变化 js变化  模板变化
   * */
  const bs = require("browser-sync").create();
  bs.init({
    server: ["./public/demo","./public/css", "./public/js", "./views"], // 相对于app.js的路径
    watch: true,
    port: port,
    middleware: [app]
  });
  return false
}

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`---\n     服务器启动成功 >>>  http://127.0.0.1:${addr.port}\n     时间：${new Date().toLocaleString()}\n---`);
  opn(`http://127.0.0.1:${addr.port}`)
}
