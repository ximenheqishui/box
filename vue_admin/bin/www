#!/usr/bin/env node


const chokidar = require('chokidar');
const path = require('path');
/**---------灵魂包围圈----------*/
  // 灵魂代码   文件监视实现node开发的热更新    路由也要有响应的修改才生效
const watcher = chokidar.watch([path.join(__dirname, '../server')], {});
watcher.on('ready', function() {
  watcher.on('all', function() {
    console.log("Clearing require.cache");
    // 删除包换server的引用缓存
    Object.keys(require.cache).forEach(function(id) {
      if (/[\/\\]server[\/\\]/.test(id))  delete require.cache[id];
    });
  });
});

/**--------- 灵魂包围圈 ----------*/



/**
 * Module dependencies.
 */
let app = require('../server/app');
let debug = require('debug')('express-ejs:server');
let http = require('http');
require("colors")
/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '9527');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`---\n     服务器启动成功 >>>  http://127.0.0.1:${addr.port}\n     时间：${new Date().toLocaleString()}\n---`.blue);
}
